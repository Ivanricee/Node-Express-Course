¿Qué es Express.js y para qué sirve?

Express.js es un framework para crear Web Apps, Web APIs o cualquier tipo de Web Services, 
es libre bajo la licencia MIT.

Express es muy liviano y minimalista además de ser extensible a través 
de Middlewares.

Los Middlewares interceptan el request y el response para ejecutar una 
acción en medio.

Caracteristicas: 

* minimalista
* Template engines
* Routing
* Middlewares
* Plugins (como middlewares)

############ generando un proyecto en express ######################

# primero necesitamos un package.json
%%%%%% npm init -y

# crea un archivo package.json,
Lo modificamos para generar una buena bas con buenas practicas:

"scripts":{
    "dev": "DEBUG=app:* nodemon index",
    "start": "NODE_ENV=production node index"
}

# creamos archivmo .eslintrc
# creamos archivo .prettierrc.json
# Ahora instalamos nuestras dependencias
 # dotenv carga nuestras vaiables de entorno
%%%%% npm i express dotenv
%%%%% npm i -D nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier
# para que nuestro codigo haga el formateo automatico cada vez que se hace un commit
  y se sube al repositorio instalamos un hook
# Modifica automaticamente nuestro package.json
  hacindo que cada vez que se haga commit toma todo el codigo y lo va a
  formatear con la congfiruacion que hemos establecido en eslint-prettier
  y lo va a subir al repositorio
    "husky": {
    "hooks": {
      //antes de hacer un commit corre lint-staged
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.js": [
      //corre slint con un fix y luego agrega todos nuestros archivos
      "eslint --fix",
      "git add"
    ]
  }
%%%%% npx mrm lint-staged

# Creamos un nuevo archivo de configuracion:
config/index.js
# levantamos el servidor en express
index.js
############################# fin ######################

###################### Request y Response Objects ###################
El objeto req (Request) en Express representa el llamado HTTP y tiene diferentes propiedades del llamado, como la cadena de texto query (Query params), los parámetros de la URL (URL params), el cuerpo (Body), los encabezados (HTTP headers), etc.

Para acceder al req basta con acceder al primer parámetro de nuestros router handlers (router middleware) ó middleware.

Como por ejemplo así lo hemos visto siempre:

app.get("/user/:id", function(req, res) {
  res.send("user " + req.params.id);
});

Pero también funcionaria sin problemas:

app.get("/user/:id", function(request, response) {
  response.send("user " + request.params.id);
});

https://developer.mozilla.org/es/docs/Web/HTTP/Methods/POST
https://platzi.com/clases/1646-backend-nodejs/22027-request-y-response-objects/
 
 
 
 ######################## Anatomía de una API Restful  ####################

REST (Representational State Transfer) es un estilo de arquitectura para construir web services, 
no es un estándar pero si una especificación muy usada.

Las peticiones HTTP van acompañadas de un “verbo” que define el tipo de petición:

    GET. Lectura de datos.
    PUT. Reemplazar datos.
    PATCH. Actualizar datos en un recurso específico.
    POST. Creación de datos.
    DELETE. Eliminación de datos.

No es recomendable habilitar un endpoint de tipo PUT y DELETE para toda 
nuestra colección de datos, sólo hacerlos para recursos específicos, 
ya que no queremos que por error se puedan borrar todos nuestros datos.


############################## CRUD en Express ##################################
# para obtener datos de prueba usamops https://mockaroo.com/ para obtener un json

# creamos nuestro archivo de rutas
./routes/movies.js
# modificamos el archivo index.js para importar las nuevas rutas
  a traves de una funcion que recibe una aplicacion de express
  y asi generar el nuevo enrutamiento

##########################  Métodos idempotentes -------------------------------------
uso basico de metodos get put post y delete y postman

####################  Implementando una capa de servicios ----------------------------

La arquitectura tradicional MVC se queda corta en aplicaciones modernas, 
por eso necesitamos una arquitectura diferente cómo la Clean Arquitecture 
que tiene una capa de servicios para manejar la lógica de negocio.

# 1 controllers: middlewares y routers, se comunican con la api envian
                 y reciben un json (los controladores solo llaman servicios)

# 2 Services: el corazon de la app aqui esta toda la logica de nogocio
              (los servicios pueden llamar otros servicios o librerias)

# 3 librerias: esta capa esta adjunta a librerias externas ej: bases de datos
               u otras api´s

#### Aplicacion a nuestro proyecto
# services:
 # aqui vamos a mover nuestros mocks
 # y tambien vamos a crear nustras rutas haciendo el llamado async de
   de los datos 
./services/movies.js       

################## MONGO DB ATLAs ####################################

# crear cuenta en mongo db ATLAs
# crear un collection y una base de datos llamada movies
# Instalar mongo db:
  ##%%%% npm i mongodb
# crear archivos de configuracion de mongo:
# .env.example -> variables de entorno: para que cualquier otro desarrollador
    sepa que variables de entorno debe alimentar localmente
# .env: tiene variables de entorno y debe ser alimentada por el archivo de configuracion

# Creamos capa de librerias lib/mongo.js

######################  Conexión con Robot3T y MongoDB Compass a una BD  #################
Robo 3T y MongoDB Compass son dos clientes con interfaz gráfica que nos permiten conectarnos 
a nuestras instancias de Mongo DB y manipularlas de una manera más fáci

######################  Implementación de las acciones de MongoDB  ########################

Los métodos de MongoDB para implementar un CRUD son:
https://docs.mongodb.com/manual/crud/
https://github.com/uokesita/the-little-mongodb-book/blob/master/es/mongodb.markdown
https://docs.mongodb.com/manual/reference/method/js-collection/

    Create
        insertOne
    Read
        find
        findOne
    Update
        updateOne
    Delete
        deleteOne
#################### Conexión de nuestros servicios con MongoDB ####################        
modificar services/movies
para quitar el codigo antiguo y establecer el CRUD de Mongo

# por defecto express necesita parsear los datos  json
# la manera de arreglarolo es agregando un middleware "body parser":
# en nuestro archivo de conexion agregamos:
./index
  app.use(express.json())


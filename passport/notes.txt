######################  Agregando la colección de usuarios ########################
Estoy agregando un crud en el proyecto de express para integrara
el middleware passport.

# Agregamso un nuevo schema para validar al usuario
 &  utils/schemas/users.js

# Creamos un nuevo servicio  (aqui van las reglas de negocio del usuario)
  Este nos permite obtener y crear usuarios de la base de datos
services/users.js
 
%%%%%%%%% npm i bcrypt

################ Creamos collection de las peliculas del ususario ########################
  # schema
  # ruta
  # y el servicio de las peliculas del usuario

# esto permitira que cuando un usuario de autentique y agregue una pelicula
# a su lista  lo pueda ver reflejado en la aplicacion

# SCHEMA: permite cuando hagamos un llamo a nuestros endpoints podamos tener el formato correcto
  schemas/userMovies

# Service: crear crud para movies de usuarios 
 services/userMovies.js

 # ROUTE: Implementar Ruta que le da manjejo al schema y sersvicio que creamos
 routes/userMovies.js

 ############# Implementando el POST y DELETE de las películas de usuariO ##############
 seguimos trabajando en 
 routes/userMovies.js
 para poder usar la ruta
 abrimos index.js

 ###################  Configuración de Passport.js    ######################

Passport.js es un middleware para express que nos permite 
implementar estrategias de autenticación de una manera rápida y simple.

%%%%%%% npm i passport jsonwebtoken passport-http passport-jwt
# Pinta colores en la terminal
%%%%%%% npm i -D chalk

############## Agregamos varianbles de entorno ------------
son necesarias para acuando estemos insertando nuestros usuarios iniciales
no estemos definiendo un password defecto, sino un password diferente
para cada aplicacion que estemos creando

# en este caso generare un password por defect opara elñ admin y otro
para admins iniciales
.env

# necesitamos el secret de nuestro jason webtoken
# ESTE LO DEBERIAMOS SACAR DE UNA PAGINA LLAMADA KEYGEN

# Api keys
# nos permite definir cuando haya un login con alguno de nuestros clientes
es decir del server o cliente adminsitrativo
le otorgue el permiso
en este casosera aleatoria mente atraves de nuestros scripts

agragamos las variables en el archivo config/index.js


############### Implementación de BasicStrategy con Passport.js ##############
Passport.js es un middleware para express que nos permite implementar 
estrategias de autenticación de una manera rápida y simple.

# vamos aimplementar nuestra estrategia de tipo

&&&&& auth/strategies/basic.js

##############   Implementación de nuestro Sign-in  ###################

Ahora vamso aimplementar la rua de sign in
# haremos nuestro servicio:
&&&&& services/apiKeys.js

# haremos nuestra ruta:
 &&&&& routes/auth.js

 # implementamos la ruta en nuestro archivo index

 index.js

 ################## Implementación de nuestro Sign-up #####################
 seguimos trajanado sobre 
 &&&&& routes/auth.js

 ################## Protegiendo nuestras rutas con Passport.js ##############
 # protejeremos las ruas de movies u user movies
 # para ello debemos importtar nuestra estrategia de jwt, es decir
   nuestra estrategia de jsonwebtoken
   en &&&&&& routes/movies.js y routes/userMovies.js


################## Implementando recordar sesión #########################
Generalmente cuando queremos implementar la opción de recordar sesión para Express 
mediante passport, lo que hacemos es extender la expiración de la Cookie.

En nuestra ruta de sign-in de nuestro render server hacemos las siguientes modificaciones:

modificamos la ruta de sign in en el archivo routes/auth

################### Middleware para el manejo de scopes ###############

# se encarga de validar en  nuestras rutos los scopes (read, create, update, delete permisions)
utils/mideware/scopesValidationHandler.js

# lo implementamos en
routes/movies.js
routes/userMovies.js

################### Configuración del server render #####################

En esta parte del curso vamos a explorar el proyecto de server side render, 
que trabajaremos en las siguientes clases.